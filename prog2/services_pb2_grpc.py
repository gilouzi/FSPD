# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import services_pb2 as services__pb2


class DoStuffStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.say_hello = channel.unary_unary(
                '/services.DoStuff/say_hello',
                request_serializer=services__pb2.HelloRequest.SerializeToString,
                response_deserializer=services__pb2.HelloReply.FromString,
                )
        self.say_hello_again = channel.unary_unary(
                '/services.DoStuff/say_hello_again',
                request_serializer=services__pb2.HelloRequest.SerializeToString,
                response_deserializer=services__pb2.HelloReply.FromString,
                )
        self.get_service_port = channel.unary_unary(
                '/services.DoStuff/get_service_port',
                request_serializer=services__pb2.ServiceName.SerializeToString,
                response_deserializer=services__pb2.ServicePort.FromString,
                )
        self.get_service_description = channel.unary_unary(
                '/services.DoStuff/get_service_description',
                request_serializer=services__pb2.ServiceName.SerializeToString,
                response_deserializer=services__pb2.ServiceDescription.FromString,
                )


class DoStuffServicer(object):
    """Missing associated documentation comment in .proto file."""

    def say_hello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def say_hello_again(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_service_port(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_service_description(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DoStuffServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'say_hello': grpc.unary_unary_rpc_method_handler(
                    servicer.say_hello,
                    request_deserializer=services__pb2.HelloRequest.FromString,
                    response_serializer=services__pb2.HelloReply.SerializeToString,
            ),
            'say_hello_again': grpc.unary_unary_rpc_method_handler(
                    servicer.say_hello_again,
                    request_deserializer=services__pb2.HelloRequest.FromString,
                    response_serializer=services__pb2.HelloReply.SerializeToString,
            ),
            'get_service_port': grpc.unary_unary_rpc_method_handler(
                    servicer.get_service_port,
                    request_deserializer=services__pb2.ServiceName.FromString,
                    response_serializer=services__pb2.ServicePort.SerializeToString,
            ),
            'get_service_description': grpc.unary_unary_rpc_method_handler(
                    servicer.get_service_description,
                    request_deserializer=services__pb2.ServiceName.FromString,
                    response_serializer=services__pb2.ServiceDescription.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.DoStuff', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DoStuff(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def say_hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.DoStuff/say_hello',
            services__pb2.HelloRequest.SerializeToString,
            services__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def say_hello_again(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.DoStuff/say_hello_again',
            services__pb2.HelloRequest.SerializeToString,
            services__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_service_port(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.DoStuff/get_service_port',
            services__pb2.ServiceName.SerializeToString,
            services__pb2.ServicePort.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_service_description(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.DoStuff/get_service_description',
            services__pb2.ServiceName.SerializeToString,
            services__pb2.ServiceDescription.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
